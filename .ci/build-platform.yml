parameters:
  platform: "macOS"
  vmImage: "macOS-10.13"

jobs:
  - job: ${{ parameters.platform }}
    pool:
      vmImage: ${{ parameters.vmImage }}
      demands: node.js
    timeoutInMinutes: 120 # This is mostly for Windows
    steps:
      - bash: |
          sudo add-apt-repository ppa:avsm/ppa
          sudo apt update
          sudo apt install opam
        displayName: "Installing opam (Ubuntu via avsm/ppa)"
        condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))

      - script: "brew install opam"
        displayName: "Installing ocaml and opam (MacOS)"
        condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))

      - template: utils/use-cache-opam-switch.yml

      - bash: |
          echo "Initialising opam..."
          opam init --yes -c 4.08.1 --disable-sandboxing
        displayName: "Azure cache miss: setting up opam switch"
        condition: and(ne(variables.CACHE_RESTORED, 'true'), ne(variables['Agent.OS'], 'Windows_NT'))

      - bash: |
          eval $(opam env)
          echo "Installing opam packages (reason, ocamlformat and ocaml-lsp-server)"
          opam pin add --yes ocaml-lsp-server.dev https://github.com/ocaml/ocaml-lsp.git
          opam install ocamlformat reason ocaml-lsp-server --yes
        condition: and(succeeded(), ne(variables['Agent.OS'], 'Windows_NT'))
        displayName: "Installing necessary opam packages (only on Unix)"

      - bash: |
          /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          echo ">>> Started xvfb"
        displayName: Start xvfb
        condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))

      - powershell: $Env:Path
        continueOnError: true
        condition: and(eq(variables['AGENT.OS'], 'Windows_NT'), and(eq(variables['Build.Reason'], 'PullRequest'), and(succeeded(), ne(variables['Build.SourceBranch'], variables['System.PullRequest.TargetBranch']))))
        displayName: "Print env in powershell"
      # Needed so that the mingw tar doesn't shadow the system tar. See
      # pipelines.yaml. We need windows bsdtar from system32, not the mingw
      # one. Note powershell doesn't need escaping of backslashes.
      - powershell: Write-Host "##vso[task.setvariable variable=PATH;]C:\Windows\system32;${env:PATH}"
        continueOnError: true
        condition: eq(variables['AGENT.OS'], 'Windows_NT')
        displayName: "Make sure windows/system32 is at front of path if windows"
      - powershell: $Env:Path
        continueOnError: true
        condition: and(eq(variables['AGENT.OS'], 'Windows_NT'), and(eq(variables['Build.Reason'], 'PullRequest'), and(succeeded(), ne(variables['Build.SourceBranch'], variables['System.PullRequest.TargetBranch']))))
        displayName: "Print env in powershell"
      - powershell: get-command tar
        continueOnError: true
        condition: and(eq(variables['AGENT.OS'], 'Windows_NT'), and(eq(variables['Build.Reason'], 'PullRequest'), and(succeeded(), ne(variables['Build.SourceBranch'], variables['System.PullRequest.TargetBranch']))))
        displayName: "Print where tar is located"
      - powershell: tar --help
        continueOnError: true
        condition: and(eq(variables['AGENT.OS'], 'Windows_NT'), and(eq(variables['Build.Reason'], 'PullRequest'), and(succeeded(), ne(variables['Build.SourceBranch'], variables['System.PullRequest.TargetBranch']))))
        displayName: "Print tar help"
      - bash: |
          # COMPUTE THE ESY INSTALL CACHE LOCATION AHEAD OF TIME
          DESIRED_LEN="86"
          # Note: This will need to change when upgrading esy version
          # that reenables long paths on windows.
          if [ "$AGENT_OS" == "Windows_NT" ]; then
            DESIRED_LEN="33"
          fi
          HOME_ESY3="$HOME/.esy/3"
          HOME_ESY3_LEN=${#HOME_ESY3}
          NUM_UNDERS=$(echo "$(($DESIRED_LEN-$HOME_ESY3_LEN))")
          UNDERS=$(printf "%-${NUM_UNDERS}s" "_")
          UNDERS="${UNDERS// /_}"
          THE_ESY__CACHE_INSTALL_PATH=${HOME_ESY3}${UNDERS}/i
          if [ "$AGENT_OS" == "Windows_NT" ]; then
            THE_ESY__CACHE_INSTALL_PATH=$( cygpath --mixed --absolute "$THE_ESY__CACHE_INSTALL_PATH")
          fi
          echo "THE_ESY__CACHE_INSTALL_PATH: $THE_ESY__CACHE_INSTALL_PATH"
          # This will be exposed as an env var ESY__CACHE_INSTALL_PATH, or an
          # Azure var esy__cache_install_path
          echo "##vso[task.setvariable variable=esy__cache_install_path]$THE_ESY__CACHE_INSTALL_PATH"
      # - bash: |
      #     which esy
      #     echo "$( which esy )"
      #     echo "##vso[task.setvariable variable=esy_bin_location]$(which esy)"
      #   displayName: "Find esy binary"
      # - bash: echo ${ESY_BIN_LOCATION}
      # displayName: "Print esy bin location"
      - bash: env
        displayName: "Print environment"
      - template: utils/use-node.yml
      - template: utils/use-esy.yml
      - script: "esy install"
        displayName: "esy install"
      - template: utils/restore-esy-cache.yml
      - script: "esy build"
        displayName: "esy build"
        continueOnError: true
      - script: "npm i"
        displayName: "npm install"
      - script: "npm run build"
        displayName: "Compiling re files"
      - script: "npm run package"
        displayName: "Packaging the extension"
      - template: utils/use-cache-vscode-test.yml
      - script: "npm test"
        displayName: "Running vscode integration tests"
        env:
          DISPLAY: ':99.0'
      - template: utils/publish-esy-cache.yml

      - bash: 'mv vscode-merlin-0.1.0.vsix vscode-merlin-$(git rev-parse --short HEAD).vsix'
        displayName: 'Adds commit hash to the release artifact name'

      - task: PublishPipelineArtifact@1
        displayName: 'Publishing the vsix file'
        condition: and(eq(variables['Build.Reason'], 'IndividualCI'), eq(variables['Agent.OS'], 'Darwin'))
        inputs:
          path: '.'
          artifact: 'extension'
