// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Sys = require("bs-platform/lib/js/sys.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Result = require("./Result.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Tablecloth = require("./tablecloth/bs/src/tablecloth.bs.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

var env_sep = Sys.unix ? ":" : ";";

function propertyExists(json, property) {
  var match = Js_json.classify(json);
  if (typeof match === "number" || match.tag !== /* JSONObject */2) {
    return false;
  } else {
    var match$1 = Js_dict.get(match[0], property);
    if (match$1 !== undefined) {
      var match$2 = Js_json.classify(Caml_option.valFromOption(match$1));
      if (typeof match$2 === "number") {
        return match$2 < 2;
      } else {
        return true;
      }
    } else {
      return false;
    }
  }
}

function mapResultAndResolvePromise(f, r) {
  return Promise.resolve(Result.$great$great$pipe(r, f));
}

function bindResultAndResolvePromise(f, r) {
  return Promise.resolve(Result.$great$great$eq(r, f));
}

function getSubDict(dict, key) {
  return Belt_Option.flatMap(Js_dict.get(dict, key), Js_json.decodeObject);
}

function mergeDicts(dict1, dict2) {
  return Js_dict.fromArray(Js_dict.entries(dict2).concat(Js_dict.entries(dict1)));
}

function $less$less(f, g, x) {
  return Curry._1(f, Curry._1(g, x));
}

var sep = Sys.unix ? "/" : "\\";

function ofString(param) {
  return Tablecloth.$$String.split(sep, param);
}

function toString(param) {
  return Tablecloth.$$String.join(sep, param);
}

function $slash(p, x) {
  return Pervasives.$at(p, /* :: */[
              x,
              /* [] */0
            ]);
}

var join = Pervasives.$at;

var Fpath = {
  ofString: ofString,
  v: ofString,
  toString: toString,
  show: toString,
  $slash: $slash,
  join: join
};

function okThen(f) {
  return (function (param) {
      return param.then((function (param) {
                    var tmp;
                    tmp = param.tag ? /* Error */Block.__(1, [param[0]]) : Curry._1(f, param[0]);
                    return Promise.resolve(tmp);
                  }));
    });
}

var R = /* alias */0;

exports.R = R;
exports.env_sep = env_sep;
exports.propertyExists = propertyExists;
exports.mapResultAndResolvePromise = mapResultAndResolvePromise;
exports.bindResultAndResolvePromise = bindResultAndResolvePromise;
exports.getSubDict = getSubDict;
exports.mergeDicts = mergeDicts;
exports.$less$less = $less$less;
exports.Fpath = Fpath;
exports.okThen = okThen;
/* Tablecloth Not a pure module */
