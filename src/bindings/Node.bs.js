// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Sys = require("bs-platform/lib/js/sys.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Https = require("https");
var Caml_sys = require("bs-platform/lib/js/caml_sys.js");
var Filename = require("bs-platform/lib/js/filename.js");
var FsStubJs = require("./fs-stub.js");
var Child_process = require("child_process");

var thisProjectsEsyJson = FsStubJs.thisProjectsEsyJson;

var Stdout = { };

var Process = {
  Stdout: Stdout
};

function ofPromiseError (error){return error.message || 'Unknown error'};

var $$Error = {
  ofPromiseError: ofPromiseError
};

function ofString(prim) {
  return Buffer.from(prim);
}

var $$Buffer$1 = {
  ofString: ofString
};

function StreamFunctor(S) {
  return { };
}

var Stream = { };

function toString(param) {
  return "mkdir(~p=true) received home path and it was not found";
}

var E = {
  toString: toString
};

function writeFile(prim, prim$1) {
  return FsStubJs.writeFile(prim, prim$1);
}

function readFile(prim) {
  return FsStubJs.readFile(prim);
}

function mkdir$prime(prim) {
  return FsStubJs.mkdir(prim);
}

function exists(prim) {
  return FsStubJs.exists(prim);
}

function open_(prim, prim$1) {
  return FsStubJs.open(prim, prim$1);
}

function write(prim, prim$1) {
  return FsStubJs.write(prim, prim$1);
}

function close(prim, prim$1) {
  return FsStubJs.close(prim, prim$1);
}

function unlink(prim) {
  return FsStubJs.unlink(prim);
}

function mkdir(p, path) {
  var forceCreate = p !== undefined ? p : false;
  if (forceCreate) {
    return FsStubJs.exists(path).then((function (doesExist) {
                  if (doesExist.tag) {
                    return Promise.resolve(/* Error */Block.__(1, [doesExist[0]]));
                  } else if (doesExist[0]) {
                    return Promise.resolve(/* Ok */Block.__(0, [/* () */0]));
                  } else {
                    var homePath = Caml_sys.caml_sys_getenv(Sys.unix ? "HOME" : "USERPROFILE");
                    if (path === homePath) {
                      return Promise.resolve(/* Error */Block.__(1, [/* PathNotFound */0]));
                    } else {
                      return mkdir(true, Curry._1(Filename.dirname, path)).then((function (param) {
                                    if (param.tag) {
                                      return Promise.resolve(/* Error */Block.__(1, [param[0]]));
                                    } else {
                                      return FsStubJs.mkdir(path);
                                    }
                                  }));
                    }
                  }
                }));
  } else {
    return FsStubJs.mkdir(path);
  }
}

var Fs = {
  E: E,
  writeFile: writeFile,
  readFile: readFile,
  mkdir$prime: mkdir$prime,
  exists: exists,
  open_: open_,
  write: write,
  close: close,
  unlink: unlink,
  mkdir: mkdir
};

function toString$1(param) {
  return "Error during exec";
}

var E$1 = {
  toString: toString$1
};

var Options = { };

function exec(cmd, options) {
  return new Promise((function (resolve, param) {
                var cp = {
                  contents: {
                    exitCode: 0
                  }
                };
                cp.contents = Child_process.exec(cmd, options, (function (err, stdout, stderr) {
                        if (err == null) {
                          return resolve(/* Ok */Block.__(0, [/* tuple */[
                                          cp.contents.exitCode,
                                          stdout,
                                          stderr
                                        ]]));
                        } else {
                          return resolve(/* Error */Block.__(1, [/* ExecFailure */0]));
                        }
                      }));
                return /* () */0;
              }));
}

var ChildProcess = {
  E: E$1,
  Options: Options,
  exec: exec
};

var Path = { };

var $$Response = { };

var $$Request = { };

function onData(t, cb) {
  t.on("data", cb);
  return /* () */0;
}

function onProgress(t, cb) {
  t.on("progress", cb);
  return /* () */0;
}

function onError(t, cb) {
  t.on("error", cb);
  return /* () */0;
}

function onEnd(t, cb) {
  t.on("end", cb);
  return /* () */0;
}

var RequestProgress = {
  onData: onData,
  onProgress: onProgress,
  onError: onError,
  onEnd: onEnd
};

function toString$2(param) {
  return "Failed to place request to " + (String(param[0]) + "");
}

var E$2 = {
  toString: toString$2
};

function getCompleteResponse(url) {
  return new Promise((function (resolve, param) {
                Https.get(url, (function (response) {
                        response.statusCode;
                        var responseText = {
                          contents: ""
                        };
                        response.on("data", (function (c) {
                                responseText.contents = responseText.contents + c.toString();
                                return /* () */0;
                              }));
                        response.on("end", (function (param) {
                                return resolve(/* Ok */Block.__(0, [responseText.contents]));
                              }));
                        response.on("error", (function (_err) {
                                return resolve(/* Error */Block.__(1, [/* Failure */["Error occurred while placing request to " + (String(url) + "")]]));
                              }));
                        return /* () */0;
                      }));
                return /* () */0;
              }));
}

var Https$1 = {
  E: E$2,
  getCompleteResponse: getCompleteResponse
};

var Os = { };

var CamlArray = /* alias */0;

exports.thisProjectsEsyJson = thisProjectsEsyJson;
exports.CamlArray = CamlArray;
exports.Process = Process;
exports.$$Error = $$Error;
exports.$$Buffer = $$Buffer$1;
exports.StreamFunctor = StreamFunctor;
exports.Stream = Stream;
exports.Fs = Fs;
exports.ChildProcess = ChildProcess;
exports.Path = Path;
exports.$$Response = $$Response;
exports.$$Request = $$Request;
exports.RequestProgress = RequestProgress;
exports.Https = Https$1;
exports.Os = Os;
/* thisProjectsEsyJson Not a pure module */
