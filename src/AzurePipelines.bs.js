// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Node = require("./bindings/Node.bs.js");
var Block = require("bs-platform/lib/js/block.js");
var Utils = require("./Utils.bs.js");
var $$Option = require("./Option.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function toString(param) {
  if (typeof param === "number") {
    if (param === /* UnsupportedOS */0) {
      return "We detected a platform for which we couldn't find cached builds";
    } else {
      return "Unexpected array value in Azure response";
    }
  } else {
    switch (param.tag | 0) {
      case /* DownloadFailure */0 :
          return " Could not download " + (String(param[0]) + " ");
      case /* InvalidJSONType */1 :
          return "Field " + (String(param[0]) + " in Azure\'s response was undefined");
      case /* MissingField */2 :
          return " Response from Azure did not contain build " + (String(param[0]) + " ");
      case /* Failure */3 :
          return " Failed to download " + (String(param[0]) + " ");
      
    }
  }
}

var E = {
  toString: toString
};

function getBuildId(responseText) {
  try {
    var json = JSON.parse(responseText);
    var match = Js_json.classify(json);
    if (typeof match === "number" || match.tag !== /* JSONObject */2) {
      return /* Error */Block.__(1, [/* InvalidJSONType */Block.__(1, ["<Entire azure response>"])]);
    } else {
      var match$1 = Js_dict.get(match[0], "value");
      if (match$1 !== undefined) {
        var match$2 = Js_json.classify(Caml_option.valFromOption(match$1));
        if (typeof match$2 === "number" || match$2.tag !== /* JSONArray */3) {
          return /* Error */Block.__(1, [/* MissingField */Block.__(2, ["value"])]);
        } else {
          var o = Caml_array.caml_array_get(match$2[0], 0);
          var match$3 = Js_json.classify(o);
          if (typeof match$3 === "number" || match$3.tag !== /* JSONObject */2) {
            return /* Error */Block.__(1, [/* InvalidFirstArrayElement */1]);
          } else {
            var match$4 = Js_dict.get(match$3[0], "id");
            if (match$4 !== undefined) {
              var match$5 = Js_json.classify(Caml_option.valFromOption(match$4));
              if (typeof match$5 === "number" || match$5.tag !== /* JSONNumber */1) {
                return /* Error */Block.__(1, [/* InvalidJSONType */Block.__(1, ["id"])]);
              } else {
                return /* Ok */Block.__(0, [match$5[0]]);
              }
            } else {
              return /* Error */Block.__(1, [/* InvalidJSONType */Block.__(1, ["id"])]);
            }
          }
        }
      } else {
        return /* Error */Block.__(1, [/* InvalidJSONType */Block.__(1, ["value"])]);
      }
    }
  }
  catch (exn){
    return /* Error */Block.__(1, [/* InvalidJSONType */Block.__(1, ["<Entire azure response>"])]);
  }
}

function getDownloadURL(responseText) {
  try {
    var json = JSON.parse(responseText);
    var match = Js_json.classify(json);
    if (typeof match === "number" || match.tag !== /* JSONObject */2) {
      return /* Error */Block.__(1, [/* InvalidJSONType */Block.__(1, ["<entire azure response>"])]);
    } else {
      var match$1 = Js_dict.get(match[0], "resource");
      if (match$1 !== undefined) {
        var match$2 = Js_json.classify(Caml_option.valFromOption(match$1));
        if (typeof match$2 === "number" || match$2.tag !== /* JSONObject */2) {
          return /* Error */Block.__(1, [/* InvalidJSONType */Block.__(1, ["resource"])]);
        } else {
          var match$3 = Js_dict.get(match$2[0], "downloadUrl");
          if (match$3 !== undefined) {
            var match$4 = Js_json.classify(Caml_option.valFromOption(match$3));
            if (typeof match$4 === "number" || match$4.tag) {
              return /* Error */Block.__(1, [/* InvalidJSONType */Block.__(1, ["downloadUrl"])]);
            } else {
              return /* Ok */Block.__(0, [match$4[0]]);
            }
          } else {
            return /* Error */Block.__(1, [/* MissingField */Block.__(2, ["downloadUrl"])]);
          }
        }
      } else {
        return /* Error */Block.__(1, [/* MissingField */Block.__(2, ["resource"])]);
      }
    }
  }
  catch (exn){
    return /* Error */Block.__(1, [/* InvalidJSONType */Block.__(1, ["<entire azure response>"])]);
  }
}

var JSONResponse = {
  CamlArray: /* alias */0,
  getBuildId: getBuildId,
  getDownloadURL: getDownloadURL
};

var restBase = "https://dev.azure.com/arrowresearch/";

var proj = "vscode-merlin";

var match = process.platform;

var os;

switch (match) {
  case "darwin" :
      os = "Darwin";
      break;
  case "linux" :
      os = "Linux";
      break;
  case "win32" :
      os = "Windows";
      break;
  default:
    os = undefined;
}

var artifactName = $$Option.$great$great$pipe(os, (function (os) {
        return "cache-" + (String(os) + "-install");
      }));

var master = "branchName=refs%2Fheads%2Fmaster";

var filter = "deletedFilter=excludeDeleted&statusFilter=completed&resultFilter=succeeded";

var latest = "queryOrder=finishTimeDescending&$top=1";

function getBuildID(param) {
  return $$Node.Https.getCompleteResponse("" + (String(restBase) + ("/" + (String(proj) + ("/_apis/build/builds?" + (String(filter) + ("&" + (String(master) + ("&" + (String(latest) + "&api-version=4.1")))))))))).then((function (param) {
                return Utils.$less$less((function (prim) {
                              return Promise.resolve(prim);
                            }), (function (param) {
                              if (param.tag) {
                                return /* Error */Block.__(1, [/* DownloadFailure */Block.__(0, [param[0][0]])]);
                              } else {
                                return getBuildId(param[0]);
                              }
                            }), param);
              }));
}

function getDownloadURL$1(latestBuildID) {
  var latestBuildID$1 = latestBuildID.toString();
  if (artifactName !== undefined) {
    return $$Node.Https.getCompleteResponse("" + (String(restBase) + ("/" + (String(proj) + ("/_apis/build/builds/" + (String(latestBuildID$1) + ("/artifacts?artifactname=" + (String(artifactName) + "&api-version=4.1")))))))).then((function (param) {
                  return Utils.$less$less((function (prim) {
                                return Promise.resolve(prim);
                              }), (function (param) {
                                if (param.tag) {
                                  return /* Error */Block.__(1, [/* Failure */Block.__(3, [param[0][0]])]);
                                } else {
                                  return getDownloadURL(param[0]);
                                }
                              }), param);
                }));
  } else {
    return Promise.resolve(/* Error */Block.__(1, [/* UnsupportedOS */0]));
  }
}

exports.E = E;
exports.JSONResponse = JSONResponse;
exports.restBase = restBase;
exports.proj = proj;
exports.os = os;
exports.artifactName = artifactName;
exports.master = master;
exports.filter = filter;
exports.latest = latest;
exports.getBuildID = getBuildID;
exports.getDownloadURL = getDownloadURL$1;
/* match Not a pure module */
