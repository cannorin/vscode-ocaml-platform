// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Esy = require("./command/Esy.bs.js");
var $$Node = require("./bindings/Node.bs.js");
var Path = require("path");
var Block = require("bs-platform/lib/js/block.js");
var Utils = require("./Utils.bs.js");

function toString(param) {
  if (typeof param === "number") {
    if (param !== 0) {
      return "Weird invariant violation. Why would .vscode/esy exist but not be a valid esy project. TODO";
    } else {
      return "Not a valid esy/opam/bsb project";
    }
  } else {
    return "Could not detect project type: esy status failed\nexitCode: " + (String(param[0]) + ("\nstdout: " + (String(param[1]) + ("\nstderr: " + (String(param[2]) + "\n")))));
  }
}

var E = {
  toString: toString
};

function detect(folder) {
  return Esy.status(folder).then((function (param) {
                if (param.tag) {
                  var e = param[0];
                  return Promise.resolve(/* Error */Block.__(1, [/* EsyStatusFailed */[
                                  -1,
                                  Esy.E.toString(e),
                                  Esy.E.toString(e)
                                ]]));
                } else {
                  var status = param[0];
                  if (status.isProject) {
                    var match = status.rootPackageConfigPath;
                    var manifestFile = (match == null) ? "" : match;
                    if (new RegExp(".json$").test(manifestFile)) {
                      if (status.isProjectReadyForDev) {
                        return Promise.resolve(/* Ok */Block.__(0, [/* Esy */Block.__(0, [/* readyForDev */true])]));
                      } else {
                        return $$Node.Fs.readFile(manifestFile).then((function (manifest) {
                                      var manifestJson = JSON.parse(manifest);
                                      var manifestHasEsyConfig = Utils.propertyExists(manifestJson, "esy");
                                      var manifestIsEsyJSON = new RegExp("esy.json$").test(manifestFile);
                                      if (manifestIsEsyJSON || manifestHasEsyConfig) {
                                        return Promise.resolve(/* Ok */Block.__(0, [/* Esy */Block.__(0, [/* readyForDev */status.isProjectReadyForDev])]));
                                      } else {
                                        var esyToolChainFolder = Path.join(folder, ".vscode", "esy");
                                        return $$Node.Fs.exists(esyToolChainFolder).then((function (doesToolChainEsyManifestExist) {
                                                      if (doesToolChainEsyManifestExist) {
                                                        return Esy.status(esyToolChainFolder).then((function (param) {
                                                                      return Utils.$less$less((function (prim) {
                                                                                    return Promise.resolve(prim);
                                                                                  }), (function (param) {
                                                                                    if (param.tag) {
                                                                                      var e = param[0];
                                                                                      return /* Error */Block.__(1, [/* EsyStatusFailed */[
                                                                                                  -1,
                                                                                                  Esy.E.toString(e),
                                                                                                  Esy.E.toString(e)
                                                                                                ]]);
                                                                                    } else {
                                                                                      var toolChainStatus = param[0];
                                                                                      if (toolChainStatus.isProject) {
                                                                                        return /* Ok */Block.__(0, [/* Bsb */Block.__(1, [/* readyForDev */toolChainStatus.isProjectReadyForDev])]);
                                                                                      } else {
                                                                                        return /* Error */Block.__(1, [/* WeirdInvariantViolation */1]);
                                                                                      }
                                                                                    }
                                                                                  }), param);
                                                                    }));
                                                      } else {
                                                        return Promise.resolve(/* Ok */Block.__(0, [/* Bsb */Block.__(1, [/* readyForDev */false])]));
                                                      }
                                                    }));
                                      }
                                    }));
                      }
                    } else {
                      return Promise.resolve(/* Ok */Block.__(0, [/* Opam */0]));
                    }
                  } else {
                    return Promise.resolve(/* Error */Block.__(1, [/* UnrecognisedProject */0]));
                  }
                }
              }));
}

exports.E = E;
exports.detect = detect;
/* Esy Not a pure module */
