// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Sys = require("bs-platform/lib/js/sys.js");
var Json = require("@glennsl/bs-json/src/Json.bs.js");
var $$Node = require("./bindings/Node.bs.js");
var Path = require("path");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Utils = require("./Utils.bs.js");
var Result = require("./Result.bs.js");
var Vscode = require("vscode");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Filename = require("bs-platform/lib/js/filename.js");
var Tablecloth = require("./tablecloth/bs/src/tablecloth.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");

function make(env, cmd) {
  var cmd$1 = Sys.unix ? cmd : cmd + ".cmd";
  var match = Js_dict.get(env, "PATH");
  if (match !== undefined) {
    return Promise.all(Tablecloth.$$Array.fromList(Tablecloth.$$String.split(Utils.env_sep, match)).map((function (p) {
                          return $$Node.Fs.exists(Filename.concat(p, cmd$1));
                        }))).then((function (param) {
                    return Utils.$less$less((function (prim) {
                                  return Promise.resolve(prim);
                                }), (function (param) {
                                  return param.filter((function (x) {
                                                return x;
                                              }));
                                }), param);
                  })).then((function (param) {
                  return Utils.$less$less((function (prim) {
                                return Promise.resolve(prim);
                              }), (function (l) {
                                var match = l.length === 0;
                                if (match) {
                                  return /* Error */Block.__(1, [" Command \"" + (String(cmd$1) + "\" not found ")]);
                                } else {
                                  return /* Ok */Block.__(0, [{
                                              cmd: cmd$1,
                                              env: env
                                            }]);
                                }
                              }), param);
                }));
  } else {
    return Promise.resolve(/* Error */Block.__(1, ["'PATH' variable not found in the environment"]));
  }
}

function output(args, cwd, param) {
  var cmd = param.cmd;
  var shellString = /* array */[cmd].concat(args).join(" ");
  console.log(shellString);
  return $$Node.ChildProcess.exec(shellString, {
                cwd: cwd,
                env: param.env
              }).then((function (param) {
                return Utils.$less$less((function (prim) {
                              return Promise.resolve(prim);
                            }), (function (param) {
                              if (param.tag) {
                                return Result.fail(Curry._1($$Node.ChildProcess.E.toString, param[0]));
                              } else {
                                var match = param[0];
                                var exitCode = match[0];
                                if (exitCode === 0) {
                                  return /* Ok */Block.__(0, [match[1]]);
                                } else {
                                  return /* Error */Block.__(1, [" Command " + (String(cmd) + (" failed:\nexitCode: " + (String(exitCode) + ("\nstderr: " + (String(match[2]) + "\n")))))]);
                                }
                              }
                            }), param);
              }));
}

var name = "esy";

var lockFile = Utils.Fpath.$slash(Utils.Fpath.v("esy.lock"), "index.json");

function make$1(env, root) {
  return Utils.okThen((function (cmd) {
                  return Result.$$return({
                              cmd: cmd,
                              lsp: (function (param) {
                                  return /* tuple */[
                                          name,
                                          /* array */[
                                            "-P",
                                            Utils.Fpath.toString(root),
                                            "exec-command",
                                            "--include-current-env",
                                            "ocamllsp"
                                          ]
                                        ];
                                }),
                              env: (function (param) {
                                  return Utils.okThen((function (stdout) {
                                                  var match = Json.parse(stdout);
                                                  if (match !== undefined) {
                                                    return Result.$$return(Json_decode.dict(Json_decode.string, Caml_option.valFromOption(match)));
                                                  } else {
                                                    return /* Error */Block.__(1, ["'esy command-env' returned non-json output: " + stdout]);
                                                  }
                                                }))(output(/* array */[
                                                  "command-env",
                                                  "--json",
                                                  "-P",
                                                  Utils.Fpath.toString(root)
                                                ], Utils.Fpath.toString(root), cmd));
                                })
                            });
                }))(make(env, "esy"));
}

var name$1 = "opam";

var lockFile$1 = Utils.Fpath.v("opam.lock");

function make$2(env, root) {
  return Utils.okThen((function (cmd) {
                  return Result.$$return({
                              cmd: cmd,
                              lsp: (function (param) {
                                  return /* tuple */[
                                          name$1,
                                          /* array */[
                                            "exec",
                                            "ocamllsp"
                                          ]
                                        ];
                                }),
                              env: (function (param) {
                                  return Utils.okThen((function (stdout) {
                                                  return Result.$$return(Js_dict.fromList(Tablecloth.List.foldLeft((function (kv, acc) {
                                                                        if (kv.tag) {
                                                                          console.log(kv[0]);
                                                                          return acc;
                                                                        } else {
                                                                          return /* :: */[
                                                                                  kv[0],
                                                                                  acc
                                                                                ];
                                                                        }
                                                                      }), /* [] */0, Tablecloth.List.map((function (l) {
                                                                            if (l) {
                                                                              var match = l[1];
                                                                              if (match && !match[1]) {
                                                                                return /* Ok */Block.__(0, [/* tuple */[
                                                                                            l[0],
                                                                                            match[0]
                                                                                          ]]);
                                                                              } else {
                                                                                console.log(l);
                                                                                return /* Error */Block.__(1, ["Splitting on '=' in env output returned more than two items"]);
                                                                              }
                                                                            } else {
                                                                              return /* Error */Block.__(1, ["Splitting on '=' in env output failed"]);
                                                                            }
                                                                          }), Tablecloth.List.map((function (x) {
                                                                                return Tablecloth.$$String.split("=", x);
                                                                              }), Tablecloth.$$String.split("\n", stdout))))));
                                                }))(output(/* array */[
                                                  "exec",
                                                  "env"
                                                ], Utils.Fpath.toString(root), cmd));
                                })
                            });
                }))(make(env, "opam"));
}

function alreadyUsed(folder) {
  return Promise.all(Tablecloth.$$Array.map((function (pm) {
                      var lockFileFpath;
                      lockFileFpath = pm.tag ? Utils.Fpath.join(pm[0], lockFile) : Utils.Fpath.join(pm[0], lockFile$1);
                      return $$Node.Fs.exists(Utils.Fpath.show(lockFileFpath)).then((function (param) {
                                    return Utils.$less$less((function (prim) {
                                                  return Promise.resolve(prim);
                                                }), (function (exists) {
                                                  return /* tuple */[
                                                          pm,
                                                          exists
                                                        ];
                                                }), param);
                                  }));
                    }), Tablecloth.$$Array.fromList(/* :: */[
                        /* Esy */Block.__(1, [folder]),
                        /* :: */[
                          /* Opam */Block.__(0, [folder]),
                          /* [] */0
                        ]
                      ]))).then((function (l) {
                return Promise.resolve(Result.$$return(Tablecloth.$$Array.toList(Tablecloth.$$Array.map((function (t) {
                                          return t[0];
                                        }), Tablecloth.$$Array.filter((function (param) {
                                              return param[1];
                                            }), l)))));
              }));
}

function lookup(projectRoot) {
  return $$Node.Fs.readDir(Utils.Fpath.toString(projectRoot)).then((function (param) {
                if (param.tag) {
                  return Promise.resolve(/* Error */Block.__(1, [param[0]]));
                } else {
                  return Promise.all(param[0].map((function (param) {
                                      var projectRoot$1 = projectRoot;
                                      var file = param;
                                      switch (file) {
                                        case "esy.json" :
                                            return Promise.resolve(/* Esy */Block.__(1, [projectRoot$1]));
                                        case "opam" :
                                            return $$Node.Fs.stat(Utils.Fpath.toString(Utils.Fpath.$slash(projectRoot$1, "opam"))).then((function (param) {
                                                          return Utils.$less$less((function (prim) {
                                                                        return Promise.resolve(prim);
                                                                      }), (function (param) {
                                                                        if (param.tag) {
                                                                          return ;
                                                                        } else {
                                                                          var match = param[0].isDirectory();
                                                                          if (match) {
                                                                            return ;
                                                                          } else {
                                                                            return /* Opam */Block.__(0, [projectRoot$1]);
                                                                          }
                                                                        }
                                                                      }), param);
                                                        }));
                                        case "package.json" :
                                            var manifestFile = Utils.Fpath.show(Utils.Fpath.$slash(projectRoot$1, "package.json"));
                                            return $$Node.Fs.readFile(manifestFile).then((function (manifest) {
                                                          var match = Json.parse(manifest);
                                                          if (match !== undefined) {
                                                            var json = Caml_option.valFromOption(match);
                                                            if (Utils.propertyExists(json, "dependencies") || Utils.propertyExists(json, "devDependencies")) {
                                                              if (Utils.propertyExists(json, "esy")) {
                                                                return Promise.resolve(/* Esy */Block.__(1, [projectRoot$1]));
                                                              } else {
                                                                return Promise.resolve(/* Esy */Block.__(1, [Utils.Fpath.$slash(Utils.Fpath.$slash(projectRoot$1, ".vscode"), "esy")]));
                                                              }
                                                            } else {
                                                              return Promise.resolve(undefined);
                                                            }
                                                          } else {
                                                            return Promise.resolve(undefined);
                                                          }
                                                        }));
                                        default:
                                          var manifestFile$1 = Utils.Fpath.show(Utils.Fpath.$slash(projectRoot$1, file));
                                          var match = Path.extname(file);
                                          switch (match) {
                                            case ".json" :
                                                return $$Node.Fs.readFile(manifestFile$1).then((function (manifest) {
                                                              var match = Json.parse(manifest);
                                                              if (match !== undefined) {
                                                                var json = Caml_option.valFromOption(match);
                                                                if (Utils.propertyExists(json, "dependencies") || Utils.propertyExists(json, "devDependencies")) {
                                                                  return Promise.resolve(/* Esy */Block.__(1, [projectRoot$1]));
                                                                } else {
                                                                  return Promise.resolve(undefined);
                                                                }
                                                              } else {
                                                                console.log("Invalid JSON file found. Ignoring...", manifest, manifestFile$1);
                                                                return Promise.resolve(undefined);
                                                              }
                                                            }));
                                            case ".opam" :
                                                return $$Node.Fs.readFile(manifestFile$1).then((function (param) {
                                                              if (param === "") {
                                                                return Promise.resolve(undefined);
                                                              } else {
                                                                return Promise.resolve(/* Opam */Block.__(0, [projectRoot$1]));
                                                              }
                                                            }));
                                            default:
                                              return Promise.resolve(undefined);
                                          }
                                      }
                                    }))).then((function (l) {
                                return Promise.resolve(/* Ok */Block.__(0, [Tablecloth.$$Array.toList(l.reduce((function (acc, x) {
                                                          return (
                                                                    x !== undefined ? Tablecloth.$$Array.fromList(/* :: */[
                                                                            x,
                                                                            /* [] */0
                                                                          ]) : Tablecloth.$$Array.empty
                                                                  ).concat(acc);
                                                        }), Tablecloth.$$Array.empty))]));
                              }));
                }
              }));
}

function setup(env, folder) {
  var projectRoot = Utils.Fpath.ofString(folder);
  return Utils.okThen((function (spec) {
                  return /* Ok */Block.__(0, [{
                              spec: spec,
                              projectRoot: projectRoot
                            }]);
                }))(alreadyUsed(projectRoot).then((function (param) {
                          if (param.tag) {
                            return Promise.resolve(/* Error */Block.__(1, [param[0]]));
                          } else {
                            var packageManagersInUse = param[0];
                            if (packageManagersInUse) {
                              return Promise.resolve(/* Ok */Block.__(0, [packageManagersInUse]));
                            } else {
                              return Utils.okThen((function (x) {
                                              if (x) {
                                                return /* Ok */Block.__(0, [x]);
                                              } else {
                                                return /* Error */Block.__(1, ["TODO: global toolchain"]);
                                              }
                                            }))(lookup(projectRoot));
                            }
                          }
                        })).then((function (param) {
                        if (param.tag) {
                          return Promise.resolve(/* Error */Block.__(1, [param[0]]));
                        } else {
                          var env$1 = env;
                          var supportedPackageManagers = param[0];
                          return Promise.all(Tablecloth.$$Array.fromList(Tablecloth.List.map((function (pm) {
                                                  var name$2;
                                                  name$2 = pm.tag ? name : name$1;
                                                  return make(env$1, name$2).then((function (param) {
                                                                return Utils.$less$less((function (prim) {
                                                                              return Promise.resolve(prim);
                                                                            }), (function (param) {
                                                                              if (param.tag) {
                                                                                return /* tuple */[
                                                                                        pm,
                                                                                        false
                                                                                      ];
                                                                              } else {
                                                                                return /* tuple */[
                                                                                        pm,
                                                                                        true
                                                                                      ];
                                                                              }
                                                                            }), param);
                                                              }));
                                                }), supportedPackageManagers))).then((function (param) {
                                        return Utils.$less$less((function (param) {
                                                      return Utils.$less$less((function (param) {
                                                                    return Utils.$less$less((function (param) {
                                                                                  return Utils.$less$less((function (prim) {
                                                                                                return Promise.resolve(prim);
                                                                                              }), Result.$$return, param);
                                                                                }), Tablecloth.$$Array.toList, param);
                                                                  }), (function (param) {
                                                                    return Tablecloth.$$Array.map((function (t) {
                                                                                  return t[0];
                                                                                }), param);
                                                                  }), param);
                                                    }), (function (param) {
                                                      return Tablecloth.$$Array.filter((function (param) {
                                                                    return param[1];
                                                                  }), param);
                                                    }), param);
                                      }));
                        }
                      })).then((function (param) {
                      if (param.tag) {
                        return Promise.resolve(/* Error */Block.__(1, [param[0]]));
                      } else {
                        var packageManagersInUse = param[0];
                        if (packageManagersInUse) {
                          if (packageManagersInUse[1]) {
                            var config = Vscode.workspace.getConfiguration("ocaml");
                            var match = config.packageManager;
                            var match$1 = config.toolChainRoot;
                            if (!(match == null) && !(match$1 == null)) {
                              var env$1 = env;
                              var name$2 = match;
                              var root = match$1;
                              if (name$2 === name$1) {
                                return make$2(env$1, root);
                              } else if (name$2 === name) {
                                return make$1(env$1, root);
                              } else {
                                return Promise.resolve(Result.fail("Invalid package manager name"));
                              }
                            } else {
                              return Promise.resolve(/* Error */Block.__(1, ["TODO: Implement prompting choice of package manager"]));
                            }
                          } else {
                            var env$2 = env;
                            var t = packageManagersInUse[0];
                            if (t.tag) {
                              return make$1(env$2, t[0]);
                            } else {
                              return make$2(env$2, t[0]);
                            }
                          }
                        } else {
                          return Promise.resolve(/* Error */Block.__(1, [" No package manager found. We support opam (https://opam.ocaml.org/) and esy (https://esy.sh/) "]));
                        }
                      }
                    })).then((function (param) {
                    if (param.tag) {
                      return Promise.resolve(/* Error */Block.__(1, [param[0]]));
                    } else {
                      var spec = param[0];
                      return Curry._1(spec.env, /* () */0).then((function (param) {
                                      if (param.tag) {
                                        return Promise.resolve(Result.fail(param[0]));
                                      } else {
                                        return make(param[0], "ocamllsp");
                                      }
                                    })).then((function (param) {
                                    return Utils.$less$less((function (prim) {
                                                  return Promise.resolve(prim);
                                                }), (function (param) {
                                                  if (param.tag) {
                                                    return /* Error */Block.__(1, [" Toolchain initialisation failed: " + (String(param[0]) + " ")]);
                                                  } else {
                                                    return /* Ok */Block.__(0, [spec]);
                                                  }
                                                }), param);
                                  }));
                    }
                  })));
}

function lsp(t) {
  return Curry._1(t.spec.lsp, /* () */0);
}

exports.setup = setup;
exports.lsp = lsp;
/* lockFile Not a pure module */
